package com.fitness.fitness;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.text.InputFilter;
import android.text.Spanned;
import android.text.method.DigitsKeyListener;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ZoomControls;

import com.fitness.fitness.database.Database;
import com.fitness.fitness.utils.Utils;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import lecho.lib.hellocharts.gesture.ContainerScrollType;
import lecho.lib.hellocharts.gesture.ZoomType;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.model.Viewport;
import lecho.lib.hellocharts.view.LineChartView;


public class WeightStatsActivity extends Activity {

    LineChartView chart = null;
    Database db = null;

    float currentZoomLevel = 0;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.weight_stat);

        db = new Database(this);

        db.addWeight("2015-10-10", 10);
        db.addWeight("2015-10-11", 14);
        db.addWeight("2015-10-15", 12);
        db.addWeight("2015-10-20", 100);

        chart = (LineChartView) findViewById(R.id.graph);

        chart.setInteractive(true);
        chart.setZoomType(ZoomType.HORIZONTAL);
        chart.setContainerScrollEnabled(true, ContainerScrollType.HORIZONTAL);
        chart.setScrollEnabled(true);


        Button add_weight = (Button)findViewById(R.id.button_add_weight);

        add_weight.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showEnterWeightDialog();
            }
        });

        updateData();
    }

    private void updateData()
    {
        Cursor c = db.queryAllWeight();


        if (c.moveToFirst())
        {
            List<PointValue> values = new ArrayList<PointValue>();
            List<AxisValue> axisValues = new ArrayList<AxisValue>();

            DateFormat format = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);


            do {
                String date_string = c.getString(c.getColumnIndex("timestamp"));
                Double weight = c.getDouble(c.getColumnIndex("weight"));

                try {
                    Date date = format.parse(date_string);

                    PointValue d = new PointValue(date.getTime(), weight.floatValue());
                    AxisValue v = new AxisValue(date.getTime(), date_string.toCharArray());

                    axisValues.add(v);
                    values.add(d);
                } catch (Exception e)
                {
                    e.printStackTrace();
                }

            } while (c.moveToNext());


            Axis axisY = new Axis().setHasLines(true);
            axisY.setName(getResources().getString(R.string.weight));
            axisY.setTextColor(Color.BLACK);
            axisY.setLineColor(Color.GRAY);

            Line line = new Line(values).setColor(Color.BLUE);

            line.setHasLabels(true);
            line.setHasLines(true);

            line.setPointRadius(1);

            List<Line> lines = new ArrayList<Line>();
            lines.add(line);

            LineChartData data = new LineChartData();
            data.setLines(lines);
            data.setValueLabelsTextColor(Color.BLACK);
            //data.col

            Axis axisX = new Axis(axisValues).setHasTiltedLabels(true).setHasLines(true).setName(getResources().getString(R.string.date));

            axisX.setMaxLabelChars(12);
            axisX.setAutoGenerated(false);
            axisX.setLineColor(Color.GRAY);
            axisX.setTextColor(Color.BLACK);

            data.setAxisXBottom(axisX);
            data.setValueLabelTextSize(8);
            data.setAxisYLeft(axisY);

            chart.setLineChartData(data);

            chart.setHorizontalScrollBarEnabled(true);
        }
    }

    private void showEnterWeightDialog()
    {
        AlertDialog.Builder alert = new AlertDialog.Builder(this);

        alert.setTitle(getResources().getString(R.string.enter_weight));
        alert.setMessage(getResources().getString(R.string.new_weight));


        final EditText input = new EditText(this);

        input.setFilters(new InputFilter[]{
                // Maximum 3 characters.
                new InputFilter.LengthFilter(3),
                // Digits only.
                new DigitsKeyListener(Boolean.FALSE, Boolean.TRUE) {
                    int beforeDecimal = 5, afterDecimal = 2;

                    @Override
                    public CharSequence filter(CharSequence source, int start, int end,
                                               Spanned dest, int dstart, int dend) {
                        String temp = input.getText() + source.toString();

                        if (temp.equals(".")) {
                            return "0.";
                        }
                        else if (temp.toString().indexOf(".") == -1) {
                            // no decimal point placed yet
                            if (temp.length() > beforeDecimal) {
                                return "";
                            }
                        } else {
                            temp = temp.substring(temp.indexOf(".") + 1);
                            if (temp.length() > afterDecimal) {
                                return "";
                            }
                        }

                        return super.filter(source, start, end, dest, dstart, dend);
                    }},});


        input.setKeyListener(DigitsKeyListener.getInstance());

        alert.setView(input);
        input.setText("0");

        alert.setPositiveButton(getResources().getString(R.string.add),
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int whichButton) {
                        String weight = input.getText().toString();
                        db.addWeight(Utils.getCurrentDate(), Float.parseFloat(weight));
                        updateData();
                    }
                });

        alert.setNegativeButton(getResources().getString(R.string.cancel), new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int whichButton) {
                // do nothing
            }
        });
        alert.show();
    }

}
